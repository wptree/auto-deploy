<?xml version="1.0" encoding="UTF-8"?>
<project default="build" basedir="." xmlns:artifact="antlib:org.apache.maven.artifact.ant">

	<property environment="env" />
	<property file="${basedir}/build.properties"/>
	<property name="YUICompressor" value="${ant.thirdparty.lib}/yuicompressor-2.4.7.jar"/>

	<condition property="isWindows">
		<os family="windows" />
	</condition>

	<taskdef resource="net/sf/antcontrib/antlib.xml">
		<classpath>
			<pathelement location="${ant.thirdparty.lib}/ant-contrib-1.0b3.jar"/>
		</classpath>
	</taskdef>

	<!-- declare the svn task-->
	<typedef resource="org/tigris/subversion/svnant/svnantlib.xml">
		<classpath>
			<pathelement location="${ant.thirdparty.lib}/svnjavahl.jar" />
			<pathelement location="${ant.thirdparty.lib}/svnant.jar" />
			<pathelement location="${ant.thirdparty.lib}/svnClientAdapter.jar" />
		</classpath>
	</typedef>

	<!-- declare the maven task-->
	<typedef resource="org/apache/maven/artifact/ant/antlib.xml" uri="antlib:org.apache.maven.artifact.ant">
		<classpath>
			<pathelement location="${ant.thirdparty.lib}/maven-ant-tasks-2.1.3.jar" />
		</classpath>
	</typedef>

	<!-- define macro for compressing js/css files -->
	<macrodef name="yuicompress">
		<attribute name="src"/>
		<attribute name="target"/>
		<attribute name="sourceType"/>
		<sequential>
			<echo message="Compressing files at @{src}" />
			<!-- create target folder if it doesn't exist already -->
			<mkdir dir="@{target}" />
			<!-- Create directories recursively first.-->
			<copy todir="@{target}">
				<fileset dir="@{src}">
					<include name="**.*"/>
					<exclude name="**/*.@{sourceType}" />
				</fileset>
			</copy>
			<!-- Compress files recursively -->
			<apply executable="java" parallel="false" verbose="true" dest="@{target}">
				<fileset dir="@{src}">
					<include name="**/*.@{sourceType}" />
				</fileset>
				<arg line="-jar" />
				<arg path="${YUICompressor}" />
				<arg value="--charset" />
				<arg value="UTF-8" />
				<arg value="-o" />
				<targetfile />
				<mapper type="glob" from="*.@{sourceType}" to="*.@{sourceType}" />
			</apply>
			<echo message="Files compressed and copied to @{target}" />
		</sequential>
	</macrodef>

	<!-- define macro for replace tokens in configration files with property files -->
	<macrodef name="replace-file-token">
		<attribute name="file" />
		<attribute name="propertyfile" default=""/>
		<attribute name="tofile" default="@{file}" />
		<sequential>
			<if>
				<available file="@{file}" />
				<then>
					<if>
						<and>
							<not>
								<equals arg1="@{propertyfile}" arg2=""/>
							</not>
							<available file="@{propertyfile}" />
						</and>
						<then>
							<echo level="verbose">Replacing token in @{file} using @{propertyfile}</echo>
							<loadfile property="@{file}.token-replaced" srcFile="@{file}">
								<filterchain>
									<filterreader classname="org.apache.tools.ant.filters.ReplaceTokens">
										<param type="propertiesfile" value="@{propertyfile}" />
									</filterreader>
								</filterchain>
							</loadfile>
							<if>
								<equals arg1="${isWindows}" arg2="true" />
								<then>
									<sleep seconds="1"/>
								</then>
							</if>
							<if>
								<isset property="@{file}.token-replaced" />
								<then>
									<echo message="${@{file}.token-replaced}" file="@{tofile}" />
									<var name="@{file}.token-replaced" unset="true" />
									<delete file="@{file}" verbose="false"/>
									<move file="@{tofile}" tofile="@{file}" verbose="false"/>
								</then>
							</if>
						</then>
						<else>
							<copy tofile="@{tofile}" file="@{file}" />
						</else>

					</if>
					<echo level="verbose">Dump token-replaced file to @{tofile}</echo>
				</then>
				<else>
					<echo message="Warning: Skip replacing @{file} due to file unavailable." level="verbose"/>
				</else>
			</if>
		</sequential>
	</macrodef>

	<path id="project.class.path">
		<fileset dir="${tomcat.home}/lib">
			<include name="**/*.jar" />
		</fileset>
		<fileset dir="${webinf.dir}/lib">
			<include name="**/*.jar" />
		</fileset>
	</path>

	<!-- prepare for the checking out:clean the directory  -->
	<target name="-init" description="Prepare the dirs for the task">
		<delete dir="${basedir}/${app.name}.war" />
		<delete dir="${build.dir}" />
		<delete dir="${svn.checkout.dest}" />
		<mkdir dir="${build.dir}" />
		<mkdir dir="${classes.dir}"/>
	</target>

	<svnSetting svnkit="false" javahl="false" username="${svn.user}" password="${svn.user.pwd}" id="svn.settings"/>

	<!-- check|update the scource from the svn -->
	<target name="-prepare-sourcecode" depends="-init">
		<echo>SVN checkout from ${svn.repository} ... </echo>
		<svn refid="svn.settings" >
			<checkout url="${svn.repository}" destPath="${svn.checkout.dest}" revision="${svn.tag}"/>
		</svn>
	</target>

	<target name="-prepare-build">
		<copy todir="${build.dir}" >
			<fileset dir="${svn.checkout.dest}/src/main">
				<include name="java/**/*.*" />
				<include name="resources/**/*.*"/>
				<exclude name="**/*.svn" />
			</fileset>
		</copy>

		<for param="config.file">
			<path>
				<fileset dir="${build.dir}/resources" includes="**/*.*"/>
			</path>
			<sequential>
				<!-- ${target} is comming from " ant -f build.xml -Dtarget=dev/qa/prod "-->
				<replace-file-token file="@{config.file}" propertyfile="${target}.properties" tofile="@{config.file}.relaced"/>
			</sequential>
		</for>

		<!-- clean history maven dependency libraries -->
		<for param="jar">
			<path>
				<fileset dir="${webinf.dir}/lib" casesensitive="false" includes="*.jar"/>
			</path>
			<sequential>
				<delete file="@{jar}"/>
			</sequential>
		</for>
	</target>

	<target name="-maven-clean">
		<delete dir="${svn.checkout.dest}/target" />
	</target>

	<target name="-maven-compile" depends="-maven-clean,-prepare-sourcecode,-prepare-build">
		<artifact:pom id="sdb.pom" file="${svn.checkout.dest}/pom.xml"/>
		<artifact:dependencies pathId="maven.classpath" filesetId="maven.deps.fileset" usescope="runtime">
			<pom refid="sdb.pom" />
		</artifact:dependencies>
		<copy todir="${webinf.dir}/lib">
			<fileset refid="maven.deps.fileset"/>
			<mapper type="flatten"/>
		</copy>
		<copy todir="${classes.dir}">
			<fileset dir="${build.dir}/java" excludes="**/*.java"/>
		</copy>

		<javac encoding="utf-8" includejavaruntime="true" srcdir="${build.dir}/java" destdir="${classes.dir}" includeantruntime="true">
			<classpath refid="project.class.path" />
		</javac>
		<copy todir="${classes.dir}">
			<fileset dir="${build.dir}/resources">
				<include name="**/*.properties" />
				<include name="**/*.xml" />
				<include name="**/*.txt" />
				<include name="**/*.vm" />
				<include name="**/*.drl" />
			</fileset>
		</copy>
		<tstamp>
			<format property="current.time" pattern="yyyy-MM-dd HH:mm:ss" />
		</tstamp>
		<echo file="${web.dir}/README">
			version: ${instance.version}
			buildAt: ${current.time}
		</echo>
	</target>

	<target name="-minify-js">
		<if>
			<available file="${web.dir}/js" type="dir"/>
			<then>
				<if>
					<available file="/tmp/js" type="dir"/>
					<then>
						<delete dir="/tmp/js" />
					</then>
				</if>
				<mkdir dir="/tmp/js" />
				<echo>********************************************************************</echo>
				<echo>**********************Compressing JavaScript************************</echo>
				<echo>********************************************************************</echo>
				<yuicompress sourcetype="js" src="${web.dir}/js" target="/tmp/js"/>
			</then>
			<else>
				<echo>**********************JS not found************************</echo>
			</else>
		</if>

	</target>

	<target name="-minify-css">
		<if>
			<available file="${web.dir}/css" type="dir"/>
			<then>
				<if>
					<available file="/tmp/css" type="dir"/>
					<then>
						<delete dir="/tmp/css" />
					</then>
				</if>
				<mkdir dir="/tmp/css" />
				<echo>********************************************************************</echo>
				<echo>**********************Compressing JavaScript************************</echo>
				<echo>********************************************************************</echo>
				<yuicompress sourcetype="css" src="${web.dir}/css" target="/tmp/css"/>
			</then>
			<else>
				<echo>**********************CSS not found************************</echo>
			</else>
		</if>
	</target>

	<target name="-copy-static-files">
		<if>
			<equals arg1="${skip.minify.static}" arg2="true"/>
			<then>
				<echo>**********************skip minify static files************************</echo>
			</then>
			<else>
				<antcall target="-minify-js">
				</antcall>
				<antcall target="-minify-css">
				</antcall>
				<delete dir="${web.dir}/js" />
				<mkdir dir="${web.dir}/js" />
				<copy todir="${web.dir}/js" failonerror="false">
					<fileset dir="/tmp/js" />
				</copy>
				<delete dir="/tmp/js" />

				<delete dir="${web.dir}/css" />
				<mkdir dir="${web.dir}/css" />
				<copy todir="${web.dir}/css" failonerror="false">
					<fileset dir="/tmp/css" />
				</copy>
				<delete dir="/tmp/css" />
			</else>
		</if>

	</target>


	<target name="war" depends="-maven-compile,-copy-static-files">
		<war encoding="utf-8" destfile="${build.dir}/${app.name}.war" webxml="${webinf.dir}/web.xml" manifest="${metainf.dir}/MANIFEST.MF">
			<lib dir="${webinf.dir}/lib" />
			<classes dir="${classes.dir}"/>
			<fileset dir="${web.dir}">
				<exclude name="html/**/*.*"/>
			</fileset>
			<exclude name="**/.svn/**" />
			<exclude name="**/web.xml" />
		</war>
	</target>

	<target name="build" depends="war" />

</project>
