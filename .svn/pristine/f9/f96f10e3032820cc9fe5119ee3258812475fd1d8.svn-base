#!/bin/csh

if($# == 0 || $1 == "help") then
        echo "Command syntax error"
        echo "Usage: `basename $0` [qa|prod] "
        echo ""
        exit 1
endif

set current = `pwd`

echo "Please input the appname you want to deploy:"
set appname=$<

if($1 == "qa" || $1 == "prod") then
        rm -f $1.properties
        rm -f $current/build.properties
else
        echo "Illegal input, only "qa","prod" is allowed."
        exit 1
endif

echo "Please input the svn target: (head|branch|tag name)"
set target=$<

if($target == "head") then
    set svn_path_target = "trunk"
    set svn_app_path = $appname
else if($target == "branch") then
    set svn_path_target = "branches"
    set svn_app_path = $appname
else 
    set svn_path_target = "tags"
    set svn_app_path = $target 
endif

#判断tagname是否存在，不存在则退出
sed "s/@appname@/$appname/g; s/@target@/$svn_path_target/g; s/@path@/$svn_app_path/g" $current/general.properties > /tmp/temp-build.properties

set build_svn = `grep svn.repository /tmp/temp-build.properties | awk -F= '{printf $2}'`
set build_path =  `echo $build_svn|awk -F"/" '{print $1, $2, $3, $4, $5, $6, $7}' OFS="/"`
set is_path_exist = `svn ls $build_path | grep $svn_app_path`

if($#is_path_exist == 0) then
    echo "the tag dose not exist."
    exit 1
endif

#classify the clusters
@ error_count = 0
while(1 == 1)
    if($error_count > 2) then
        echo "you must input something, program is going to quit now."
        exit 1
    endif

    set string = `ls /usr/local`
    echo "please input the cluster instance name you want to deploy:[all]"
    set clusters = ($<)
    
    set not_exist_clusters = ()
    if("x$clusters" == "x") then
        echo "input error."
        @ error_count++
        continue
    endif

    if($clusters[1] == "all" || $clusters[1] == "ALL") then
            set exist_clusters = (`ls /usr/local | grep ${appname}-node`)  
    else
        set exist_clusters = ()
        foreach model ($clusters)
            foreach exist ($exist_clusters)
                if($model == $exist) then
                    goto skip
                endif
            end
            @ count = 0 
            foreach var ($string)
                if($model == $var) then
                    set exist_clusters = ($exist_clusters $model)
                    @ count --
                endif
                @ count ++
            end
            if($#string == $count) then
                set not_exist_clusters = ($not_exist_clusters $model)
            endif
            skip:
        end
    endif
    break
end

# create not exist clusters
if($#not_exist_clusters != 0) then
    echo "do you want to create a https instance[N/y]:"
    set is_https = $<

    set nginx_path = /usr/local/nginx/conf/vhost
    set is_path_exist = `ls $nginx_path | grep $appname`

    if ($is_https == 'y' || $is_https == 'Y') then
        set port_type = "https"
    else
        set port_type = "http"
    endif

    if($#is_path_exist == 0) then
        sed "s/@appname@/$appname/g" $current/${port_type}.conf > $current/${appname}.conf.tmp
        sudo mv -f $current/${appname}.conf.tmp $nginx_path/${appname}.conf
        sudo sed -i "s/include files here/include files here\n    include vhost\/$appname.conf;/g" /usr/local/nginx/conf/nginx.conf
    endif

endif

foreach new_app ($not_exist_clusters)
    set new_tomcat = /tmp/${new_app}_temp
    
    sed 's/^/set /g' $current/deploy.properties > $current/deploy.properties.tmp
    source $current/deploy.properties.tmp
    rm -f $current/deploy.properties.tmp

    if($port_type == "https") then
        cp -rf $tomcat_https_template $new_tomcat
    else
        cp -rf $tomcat_template $new_tomcat
    endif

    sed -i "s/@http.port@/$http_port/g; s/@https.port@/$https_port/g; s/@server.port@/$server_port/g; s/@connector.port@/$connector_port/g" $new_tomcat/conf/server.xml
    sed -i "s/@appname@/$new_app/g" $new_tomcat/bin/setenv.sh
    sed -i "s/@appname@/$new_app/g" $new_tomcat/lib/pkgconfig/tcnative-1.pc
    
    echo "**************************************************************" 
    echo "******* Initing a $port_type instance:  $new_app  ***********" 
    echo "**************************************************************" 
    if($port_type == "https") then
        set port = $https_port
    else
        set port = $http_port
    endif

    set repeat_port = `grep $new_app= $current/cluster.instance`
    if($#repeat_port == 0 || $? != 0) then
        echo "$new_app=$port" >> $current/cluster.instance
    else
        sed -i "/$new_app=/c $new_app=$port" $current/cluster.instance
    endif

    sed -i "s/@http.port@/$port/g" $new_tomcat/bin/myshutdown.sh
    sudo mv -f $new_tomcat /usr/local/$new_app  
    
    sed "s/@appname@/$new_app/g" $service_template > $current/service.tmp
    sudo mv -f $current/service.tmp /etc/init.d/$new_app
    sudo chmod a+x /etc/init.d/$new_app
        
    awk -F= '{if($1 ~ /port/) print $1,$2+1 > "deploy.properties";else if($1 ~ /template/) print $1,$2 > "deploy.properties"}' OFS="=" $current/deploy.properties
    

    sudo sed -i "s/upstream $appname {/upstream $appname {\n    server 127.0.0.1:$port weight=1;/g" /usr/local/nginx/conf/vhost/$appname.conf
   
    set exist_clusters = ($exist_clusters $new_app)
end

# reload nginx , effect the new added clusters
if($#not_exist_clusters != 0) then
    sudo service nginx reload
else if($#exist_clusters == 0) then
    echo "no instance. the deploy program quits."
    exit 1
endif


sed "s/@instance@/$exist_clusters[1]/g" /tmp/temp-build.properties > $current/build.properties
rm -f /tmp/temp-build.properties
echo "\n Building Project $appname from $svn_path_target/$svn_app_path ..."

svn export $build_svn/deploy/$1.properties --username pwan --password 123456
  
ant -f build.xml -Dtarget=$1
rm -f $current/build.properties

#stop the static nginx agent
sudo sed -i "/include static.conf/c    #include static.conf" /usr/local/nginx/conf/vhost/$appname.conf
sudo service nginx reload

# start all the clusters
foreach app ($exist_clusters)
    set CATALINA_HOME = /usr/local/$app

    sudo service $app stop

    sleep 5

    #Clean history deployment
    sudo rm -f $CATALINA_HOME/webapps/$appname.war
    sudo rm -rf $CATALINA_HOME/webapps/$appname
    sudo rm -f $CATALINA_HOME/logs/*
    #Clean finished

    #distribute war to tomcat cluster
    sudo cp $current/build/$appname.war $CATALINA_HOME/webapps/
    sleep 3

    sudo service $app start
    
    sleep 5
    set port = `grep $app= $current/cluster.instance | awk -F= '{printf $2}'`

    # test starting suc.
    if($#exist_clusters == 1) then
        continue
    endif

    while(1 == 1)
        sleep 5
        set status_code = `curl -s -o /dev/null -I -w "%{http_code}" localhost:$port/$appname`
        if($status_code <400 && $status_code > 0) then
            echo "Ping localhost:$port/$appname ===> status: $status_code  $app:suc"
            break
        endif
        echo "Ping localhost:$port/$appname ===> status: $status_code, try accessing after 5s......"
    end
end

if($clusters[1] == "all" || $clusters[1] == "ALL") then
    
    #copy the static files
    set static_root = /var/www/$appname
    set web_dir = $current/$appname/src/main/webapp
    sudo rm -rf $static_root/*
    sudo cp -rf $web_dir/js $static_root/js
    sudo cp -rf $web_dir/css $static_root/css

    #open the static agent
    sudo sed -i "/include static.conf/c     include static.conf" /usr/local/nginx/conf/vhost/$appname.conf
    sudo service nginx reload
endif

exit $?